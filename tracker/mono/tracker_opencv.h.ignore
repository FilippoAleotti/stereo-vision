#ifndef TRACKER_OPENCV_H_
#define TRACKER_OPENCV_H_



#include <iostream>

#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/video/tracking.hpp>

#include "tracker_base.h"
#include "config_parser.h"
#include "../base/helper_opencv.h"


namespace track {

class TrackerOpencv : public TrackerBase
{
public:
   TrackerOpencv();
   ~TrackerOpencv();

   virtual void config(std::string conf);
   virtual std::string getConfig();
   virtual std::string getConfigDocs();

   virtual int init(const core::Image& img);
   virtual int track(const core::Image& img);

   virtual int countTracked();
   virtual int countFeatures();
   virtual FeatureInfo feature(int i);
   virtual void removeTrack(int i) {}

protected:
   core::Image prevImg_;
   cv::Mat prevMat_;
   std::vector<FeatureInfo> feats_;
   //GoodFeaturesToTrackDetector detector_;

   ConfigParserMap config_;
   ConfigParserMap configWinSize_;

   void addPointsToTrack(std::vector<cv::Point2f>& points);
   void cvPointsToFeatureInfo(std::vector<cv::Point2f>& points, std::vector<FeatureInfo>& feats);
   void replaceLostFeatures(cv::Mat& img);
   bool isEqual(double a, double b);
   bool replaceLost();
   int winSizeWidth();
   int winSizeHeight();
   int maxPyrLevel();
   int numFeats();
   double qualityLvl();
   int minDistance();
   int blockSize();
   bool useHarris();
   double harrisK();
};

}

#endif
