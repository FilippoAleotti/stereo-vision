#include "tracker_bfm.h"

#include "../base/helper_opencv.h"
#include "../stereo/debug_helper.h"

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

namespace
{

void smoothImage(const core::Image& img, core::Image& img_smooth)
{
  cv::Mat cvimg_tmp, cvimg_smooth;
  track::HelperOpencv::ImageToMat(img, cvimg_tmp);
  //cv::imshow("img_nosmooth", cvimg_tmp);
  cv::GaussianBlur(cvimg_tmp, cvimg_smooth, cv::Size(3,3), 0.7);
  //cv::imshow("img_smooth", cvimg_smooth);
  track::HelperOpencv::MatToImage(cvimg_smooth, img_smooth);
}

}

namespace track {

using namespace std;
using namespace cv;

TrackerBFM::TrackerBFM(FeatureDetectorBase& detector, int max_features, double min_crosscorr,
    int patch_size, int window_size) :
  detector_(detector), max_feats_(max_features), min_crosscorr_(min_crosscorr)
{
  cbw_ = cbh_ = patch_size;
  matches_p_.resize(max_feats_);
  matches_c_.resize(max_feats_);
  patches_p_.resize(max_feats_);
  patches_c_.resize(max_feats_);
  age_.assign(max_feats_, -1);

  wsize_left_ = window_size / 2;
  wsize_right_ = window_size / 2;
  wsize_up_ = window_size / 2;
  wsize_down_ = window_size / 2;
  use_smoothing_ = true;
}

TrackerBFM::TrackerBFM(FeatureDetectorBase& detector, int max_features, double min_crosscorr,
    int patch_size, int ws_left, int ws_right, int ws_up, int ws_down) :
  detector_(detector), max_feats_(max_features), min_crosscorr_(min_crosscorr)
{
  cbw_ = cbh_ = patch_size;
  matches_p_.resize(max_feats_);
  matches_c_.resize(max_feats_);
  patches_p_.resize(max_feats_);
  patches_c_.resize(max_feats_);
  age_.assign(max_feats_, -1);

  wsize_left_ = ws_left;
  wsize_right_ = ws_right;
  wsize_up_ = ws_up;
  wsize_down_ = ws_down;
  use_smoothing_ = true;
}

int TrackerBFM::init(const core::Image& img)
{
  if(use_smoothing_)
    smoothImage(img, img_c_);
  else
    img_c_ = img;

  // detect new features
  std::vector<core::Point> feats;
  detector_.detect(img_c_, feats);
  // lay out patches to vectors
  vector<FeaturePatch> patches;
  copyPatches(img_c_, feats, patches);
  // init them
  for(size_t i = 0; i < age_.size(); i++) age_[i] = -1;
  for(size_t i = 0; (i < feats.size() && i < matches_c_.size()); i++) {
    matches_c_[i] = feats[i];
    patches_c_[i] = patches[i];
    age_[i] = 0;
  }

  return 0;
}

int TrackerBFM::track(const core::Image& img)
{
  // age = -1 if feature is dead
  // age = 0 if feature is added just now (only curr matters)
  img_p_ = img_c_;
  if(use_smoothing_)
    smoothImage(img, img_c_);
  else
    img_c_ = img;

  matches_p_ = matches_c_;
  patches_p_ = patches_c_;

  std::vector<core::Point> feats;
  detector_.detect(img_c_, feats);
  vector<FeaturePatch> patches;
  copyPatches(img_c_, feats, patches);
  vector<int> match_index;
  // match temporal
  cout << "[mono] matching prev-curr\n";
  matchFeatures(img_p_, img_c_, matches_p_, feats, patches_p_, patches, match_index,
      wsize_left_, wsize_right_, wsize_up_, wsize_down_, age_, false);

  std::vector<bool> unused_features;
  updateMatches(feats, patches, match_index, unused_features);
  replaceDeadFeatures(feats, patches, unused_features);
  return 0;
}

void TrackerBFM::replaceDeadFeatures(const std::vector<core::Point>& feats_c,
    const std::vector<FeaturePatch>& patches_c,
    std::vector<bool>& unused_features)
{
  size_t j = 0;
  for(size_t i = 0; i < age_.size(); i++) {
    if(age_[i] < 0) {
      // first find next unused feature in matches set
      while(j < unused_features.size()) {
        if(unused_features[j] == true) {
          unused_features[j] = false;
          break;
        }
        j++;
      }
      // if no more unused feats
      if(j >= unused_features.size())
        break;
      // replace the dead one with unused new feature
      matches_c_[i] = feats_c[j];
      patches_c_[i] = patches_c[j];
      age_[i] = 0;
    }
  }
}


void TrackerBFM::updateMatches(const std::vector<core::Point>& feats,
    const std::vector<FeaturePatch>& patches,
    const std::vector<int>& match_index,
    std::vector<bool>& unused_features)
{
  assert(match_index.size() == (size_t)max_feats_);
  unused_features.assign(feats.size(), true);
  int num_match = 0;
  for(size_t i = 0; i < matches_c_.size(); i++) {
    // if it is already dead from before, skip it so it can be replaced
    if(age_[i] < 0)
      continue;
    int mi = match_index[i];
    // check for match
    if(mi >= 0) {
      matches_c_[i] = feats[mi];
      patches_c_[i] = patches[mi];
      age_[i]++;
      unused_features[mi] = false;
      num_match++;
      continue;
    }
    // else we have a dead feature :(
    death_count_++;
    age_acc_ += age_[i];
    age_[i] = -1;
  }
  cout << "number of final matches: " << num_match << "\n";
}
void TrackerBFM::matchFeatures(const core::Image& img_1, const core::Image& img_2,
    const std::vector<core::Point>& feats1,
    const std::vector<core::Point>& feats2,
    const std::vector<FeaturePatch>& patches1,
    const std::vector<FeaturePatch>& patches2,
    std::vector<int>& match_index, double dxl,
    double dxr, double dyu, double dyd,
    const std::vector<int>& ages, bool debug)
{
  // debug:
  Mat disp_1_track, disp_2_track, cvimg_1, cvimg_2;
  Mat disp_left_patch = Mat::zeros(cbh_, cbw_, CV_8U);
  Mat disp_right_patch = Mat::zeros(cbh_, cbw_, CV_8U);
  HelperOpencv::ImageToMat(img_1, cvimg_1);
  HelperOpencv::ImageToMat(img_2, cvimg_2);

  match_index.assign(feats1.size(), -1);
  vector<int> matches_1to2, matches_2to1;
  matches_1to2.resize(feats1.size());
  matches_2to1.resize(feats2.size());
  vector<double> crosscorrs;
  crosscorrs.resize(feats1.size());
  double corr, dx, dy;
  // match 1 to 2
  for(size_t i = 0; i < feats1.size(); i++) {
    // dont track if the reference feature is dead
    if(ages[i] < 0) {
      matches_1to2[i] = -1;
      continue;
    }

    //if(i == 151) {
    //   try {throw 0;} catch(int) {}
    //}
    int ind_best = -1;
    double corr_best = 0.0;
    for(size_t j = 0; j < feats2.size(); j++) {
      dy = feats1[i].y_ - feats2[j].y_;
      dx = feats1[i].x_ - feats2[j].x_;
      // ignore features outside
      if(dy < 0.0 && dy < -dyd) continue;
      if(dy > 0.0 && dy > dyu) continue;
      if(dx < 0.0 && dx < -dxr) continue;
      if(dx > 0.0 && dx > dxl) continue;

      //cout << "match 1-2: " << i << " - " << j << endl;
      corr = abs(getCorrelation(patches1[i], patches2[j]));

      // debug: draw on images
      //if(debug) {
      ////if(debug && i == 275) {
      //   cv::Point2f pt;
      //   cvtColor(cvimg_1, disp_1_track, COLOR_GRAY2RGB);
      //   pt.x = feats1[i].x_;
      //   pt.y = feats1[i].y_;
      //   cv::circle(disp_1_track, pt, 2, Scalar(255,0,0), 2, 8);
      //   Point pt_rec1, pt_rec2;
      //   Rect rect;
      //   rect.x = pt.x - dxl;
      //   rect.y = pt.y - dyd;
      //   rect.width = dxl + dxr + 1;
      //   rect.height = dyd + dyu + 1;
      //   //pt_rec1.x_ = pt.x - dxl;
      //   //pt_rec1.y_ = pt.y - dyd;
      //   //pt_rec2.x_ = pt.x + dxr;
      //   //pt_rec2.y_ = pt.y + dyd;
      //   rectangle(disp_1_track, rect, Scalar(255,0,0), 1, 8);
      //   //cout << "size: " << disp_left_track.size();
      //   imshow("image_1", disp_1_track);

      //   cv::Point2f pt1, pt2, pt_best;
      //   cout << i << " - " << j << ":\n";
      //   cout << feats1[i] << " - " << feats2[j] << "\n";
      //   cout << "correlation: " << corr << "  (the best: " << corr_best << ")\n";
      //   cvtColor(cvimg_2, disp_2_track, COLOR_GRAY2RGB);
      //   pt2.x = feats2[j].x_;
      //   pt2.y = feats2[j].y_;
      //   if(ind_best >= 0) {
      //      pt_best.x = feats2[ind_best].x_;
      //      pt_best.y = feats2[ind_best].y_;
      //      cv::circle(disp_2_track, pt_best, 2, Scalar(0,255,0), 2, 8);
      //   }
      //   //cout << pt1 << " <--> " << pt2 << "\n--------------------------------\n";
      //   cv::circle(disp_2_track, pt2, 2, Scalar(255,0,0), 2, 8);
      //   rectangle(disp_2_track, rect, Scalar(255,0,0), 1, 8);
      //   imshow("image_2", disp_2_track);
      //   Mat disp_patch_1, disp_patch_2, disp_patch_best;
      //   DebugHelper::renderPatch(patches1[i], disp_patch_1);
      //   DebugHelper::renderPatch(patches2[j], disp_patch_2);
      //   if(ind_best >= 0)
      //      DebugHelper::renderPatch(patches2[ind_best], disp_patch_best);
      //   //cout << patches1[i].mat_ << endl;
      //   //cout << patches2[j].mat_ << endl;
      //   imshow("patch_1", disp_patch_1);
      //   imshow("patch_2", disp_patch_2);
      //   if(ind_best >= 0)
      //      imshow("patch_2_best", disp_patch_best);
      //   waitKey(0);
      //}
      // end debug
      if(corr > corr_best) {
        corr_best = corr;
        ind_best = j;
      }
    }

    if(debug)
      destroyWindow("patch_2_best");

    crosscorrs[i] = corr_best;
    //cout << corr_best << endl;
    if(corr_best > min_crosscorr_)
      matches_1to2[i] = ind_best;
    else
      matches_1to2[i] = -1;
    }

    // match 2 to 1
    for(size_t i = 0; i < feats2.size(); i++) {
      int ind_best = -1;
      double corr_best = 0.0;
      for(size_t j = 0; j < feats1.size(); j++) {
        // dont track if the temporal reference feature is dead
        if(ages[j] < 0) {
          matches_2to1[i] = -1;
          continue;
        }
        dy = feats1[j].y_ - feats2[i].y_;
        dx = feats1[j].x_ - feats2[i].x_;
        if(dy < 0.0 && dy < -dyd) continue;
        if(dy > 0.0 && dy > dyu) continue;
        if(dx < 0.0 && dx < -dxr) continue;
        if(dx > 0.0 && dx > dxl) continue;

        // TODO - we can optimize this and put corrs in a map during the first match
        //cout << "match 2-1: " << i << " - " << j << endl;
        corr = abs(getCorrelation(patches1[j], patches2[i]));
        if(corr > corr_best) {
          corr_best = corr;
          ind_best = j;
        }
        //cout << corr << endl;
      }
      //cout << corr_best << endl;
      if(corr_best > min_crosscorr_) {
        matches_2to1[i] = ind_best;
      }
      else
        matches_2to1[i] = -1;
    }

    // filter only the married features
    for(int i = 0; i < feats1.size(); i++) {
      int m_1to2 = matches_1to2[i];
      // if two features were matced to each other then accept the match
      if(m_1to2 >= 0) {
        if(matches_2to1[m_1to2] == i)
          match_index[i] = m_1to2;
      }
    }

    //// filter only the married features
    //vector<int> m_unsorted;
    //vector<double> corr_unsorted;
    //for(int i = 0; (size_t)i < feats1.size(); i++) {
    //   int m_1to2 = matches_1to2[i];
    //   // if two features were matced to each other then accept the match
    //   if(m_1to2 >= 0) {
    //      if(matches_2to1[m_1to2] == i) {
    //         m_unsorted.push_back(i);
    //         corr_unsorted.push_back(crosscorrs[i]);
    //      }
    //   }
    //}

    //// set the match indices
    //vector<size_t> indices = getSortedIndices(corr_unsorted);
    //size_t i;
    //for(i = 0; i < indices.size(); i++) {
    //   int index1 = m_unsorted[indices[i]];
    //   match_index[index1] = matches_1to2[index1];
    //}

    //cout << "matches: " << i << " - second img feat num: " << feats2.size() << endl;
  }
  std::vector<size_t> TrackerBFM::getSortedIndices(std::vector<double> const& values) {
    std::vector<size_t> indices(values.size());
    std::iota(begin(indices), end(indices), static_cast<size_t>(0));
    std::sort(begin(indices), end(indices), [&](size_t a, size_t b) { return values[a] > values[b]; } );
    return indices;
  }

  double TrackerBFM::getCorrelation(const FeaturePatch& p1, const FeaturePatch& p2)
  {
    //std::cout << p1.mat_.size() << " -- " << p2.mat_.size() << endl;
    assert(p1.mat_.rows == p2.mat_.rows);
    double n = p1.mat_.rows;
    double D = p1.mat_.dot(p2.mat_);
    return (n * D - (p1.A_ * p2.A_)) * p1.C_ * p2.C_;
  }

  void TrackerBFM::copyPatches(core::Image& img, std::vector<core::Point>& features,
      std::vector<FeaturePatch>& patches)
  {
    int cx, cy;
    int patchsz = cbw_*cbh_;
    int radx = (cbw_ - 1) / 2;
    int rady = (cbh_ - 1) / 2;
    for(size_t k = 0; k < features.size(); k++) {
      FeaturePatch patch;
      //patch.mat_ = Mat::zeros(patchsz, 1, CV_8U);
      patch.mat_ = Mat(patchsz, 1, CV_8U);
      cx = features[k].x_;
      cy = features[k].y_;
      //if(k == 1496)
      //cout << k << ": " << img.cols_ << "x" << img.rows_ << "\ncent: " << cx << " " << cy << "\n";
      assert(cx >= radx && cx < (img.cols_-radx));
      assert(cy >= rady && cy < (img.rows_-rady));
      int vpos = 0;
      for(int i = cy - rady; i <= cy + rady; i++) {
        for(int j = cx - radx; j <= cx + radx; j++) {
          //cout << k << " -> " << i << "-" << j << " = " << endl;
          //cout << (int)img(i,j) << endl;
          patch.mat_.at<uint8_t>(vpos,0) = img(i,j);
          patch.A_ += img(i,j);
          patch.B_ += (img(i,j) * img(i,j));
          vpos++;
        }
      }
      patch.C_ = 1.0 / sqrt((patchsz * patch.B_) - (patch.A_ * patch.A_));
      patches.push_back(patch);
    }
  }

  int TrackerBFM::countFeatures()
  {
    return matches_p_.size();
  }

  int TrackerBFM::countTracked()
  {
    int cnt = 0;
    for(size_t i = 0; i < age_.size(); i++) {
      if(age_[i] > 0)
        cnt++;
    }
    return cnt;
  }

  FeatureData TrackerBFM::getFeatureData(int i)
  {
    FeatureData fdata;
    fdata.feat_ = feature(i);
    fdata.desc_prev_ = patches_p_[i].mat_.reshape(1, cbh_).clone();
    fdata.desc_curr_ = patches_c_[i].mat_.reshape(1, cbh_).clone();
    return fdata;
  }


  void TrackerBFM::printStats()
  {
    std::cout << "[TrackerBFM] Active tracks: " << countTracked() << "\n";
    std::cout << "[TrackerBFM] Average track age: " << (double) age_acc_ / death_count_ << "\n";
  }

  FeatureInfo TrackerBFM::feature(int i)
  {
    FeatureInfo feat;
    feat.prev_ = matches_p_[i];
    feat.curr_ = matches_c_[i];
    feat.age_ = age_[i];
    //feat.status_ = age_[i] + 1;
    return std::move(feat);
  }

  }
